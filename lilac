#!/usr/bin/python3 -u

import os
import sys
import traceback
import logging
import configparser
import time
from subprocess import CalledProcessError
from collections import defaultdict

topdir = os.path.dirname(os.path.abspath(__file__))
BIND_MOUNTS = [
  os.path.expanduser('~/.cargo') + ':' + '/build/.cargo',
]

def may_download_winterpy_libs():
  import requests
  os.makedirs(topdir+'/pylib', exist_ok=True)
  libs = ['archpkg', 'htmlutils', 'mailutils', 'myutils',
            'nicelogger', 'serializer']
  s = requests.Session()
  for name in libs:
    name += '.py'
    path = os.path.join(topdir, 'pylib', name)
    if not os.path.exists(path):
        print('Downloading %s' % name)
        r = s.get('https://raw.githubusercontent.com/lilydjwg/winterpy/master/pylib/'+name)
        with open(path, 'wb') as f:
          f.write(r.content)

if __name__ == '__main__':
  may_download_winterpy_libs()

sys.path.append(topdir)
sys.path.append(topdir+'/pylib')

config = configparser.ConfigParser()
config.optionxform = lambda option: option
config.read(topdir+'/config.ini')

# Setting up enviroment variables
os.environ.update(config.items('enviroment variables'))
os.environ['PATH'] = topdir + ':' + os.environ['PATH']

DESTDIR = os.path.expanduser(config.get('repository', 'destdir'))
MYNAME = config.get('lilac', 'name')

building_packages = set()
nvdata = {}
DEPENDS = {}

from toposort import toposort_flatten

from myutils import at_dir, execution_timeout, lock_file
from serializer import PickledData
from nicelogger import enable_pretty_logging

import lilaclib
from lilaclib import (
  git_reset_hard, git_last_commit,
  EMPTY_COMMIT, pkgrel_changed, lilac_build,
  MissingDependencies, AurDownloadError,
)
from lilac2 import lilacpy
from lilac2.packages import (
  DependencyManager, get_dependency_map, get_changed_packages,
)
from lilac2.cmd import run_cmd, git_pull, git_push
from lilac2.tools import kill_child_processes, is_nodejs_thing
from lilac2.repo import Repo
from lilac2.const import mydir
from lilac2.nvchecker import packages_need_update, nvtake

logger = logging.getLogger(__name__)
build_logger = logging.getLogger('build')
REPO = Repo(config)

def setup_build_logger():
  handler = logging.FileHandler(os.path.join(mydir, 'build.log'))
  handler.setFormatter(logging.Formatter('[%(asctime)s] %(message)s', '%Y-%m-%d %H:%M:%S'))
  build_logger.addHandler(handler)

def build_package(package, mod):
  logger.info('building %s', package)
  start_time = time.time()
  try:
    built_successfully = False
    n = nvdata[package]
    maintainer = REPO.find_maintainer()
    name, email = maintainer.split('<', 1)
    name = name.strip('" ')
    email = email.rstrip('>')
    os.environ['PACKAGER'] = '%s (on behalf of %s) <%s>' % (MYNAME, name, email)
    if is_nodejs_thing():
      # nodejs things have bad error handling. If they go mad, allow them to
      # be mad only one hour.
      time_limit = 1
    else:
      # wait at most 6 hours
      time_limit = 6
    try:
      with execution_timeout(time_limit * 3600):
        lilac_build(
          mod,
          oldver = n[0], newver = n[1],
          depends = DEPENDS.get(package, ()),
          bindmounts = BIND_MOUNTS,
        )
    except TimeoutError:
      kill_child_processes()
      raise
    sign_and_copy()
    built_successfully = True
    build_logger.info('%s %s successful after %ds',
                      package, n[1], time.time() - start_time)
  except MissingDependencies:
    build_logger.error('%s %s failed after %ds',
                      package, n[1], time.time() - start_time)
    raise
  except Exception as e:
    tb = traceback.format_exc()
    logger.exception('packaging error')
    send_error_report(package, exc=(e, tb))
    build_logger.error('%s %s failed after %ds',
                       package, n[1], time.time() - start_time)
  if config.getboolean('lilac', 'save_buildlog'):
    with open('lilac-%s.log' % n[1].replace('/', '-'), 'w') as log:
      log.write(lilaclib.build_output)
  lilaclib.build_output = None
  return built_successfully

def send_error_report(name, *, msg=None, exc=None, subject=None):
  if msg is None and exc is None:
    raise TypeError('send_error_report received inefficient args')

  if hasattr(mod, 'emails'):
    emails = mod.emails
    tb_find = True
  else:
    emails, tb_find = REPO.find_maintainer_or_admin(package=name)

  if not type(emails) is list:
    emails = [emails]

  msgs = []
  if msg is not None:
    msgs.append(msg)

  if exc is not None:
    exception, tb = exc
    if isinstance(exception, CalledProcessError):
      subject = subject or '在编译软件包 %s 时发生错误'
      msgs.append('命令执行失败！\n\n命令 %r 返回了错误号 %d。' \
                  '命令的输出如下：\n\n%s' % (
                    exception.cmd, exception.returncode, exception.output))
      msgs.append('调用栈如下：\n\n' + tb)
    elif isinstance(exception, AurDownloadError):
      subject = subject or '在获取AUR包 %s 时发生错误'
      msgs.append('获取AUR包失败！\n\n')
      msgs.append('调用栈如下：\n\n' + tb)
    else:
      subject = subject or '在编译软件包 %s 时发生未知错误'
      msgs.append('发生未知错误！调用栈如下：\n\n' + tb)

  if '%s' in subject:
    subject = subject % name

  if tb_find:
    msgs.append('获取维护者信息也失败了！调用栈如下：\n\n' + tb_find)
  if lilaclib.build_output:
    msgs.append('编译命令输出如下：\n\n' + lilaclib.build_output)

  msg = '\n'.join(msgs)
  for email in emails:
    logger.debug('mail to %s:\nsubject: %s\nbody: %s', email, subject, msg[:200])
    REPO.sendmail(email, subject, msg)

def sign_and_copy():
  pkgs = [x for x in os.listdir() if x.endswith('.pkg.tar.xz')]
  for pkg in pkgs:
    run_cmd(['gpg', '--pinentry-mode', 'loopback', '--passphrase', '',
             '--detach-sign', '--', pkg])
  for f in os.listdir():
    if not f.endswith(('.pkg.tar.xz', '.pkg.tar.xz.sig', '.src.tar.gz')):
      continue
    try:
      os.link(f, os.path.join(DESTDIR, f))
    except FileExistsError:
      pass

def start_build(mods, failed, built):
  # built is used to collect built package names
  global DEPENDS
  depman = DependencyManager(REPO.repodir)
  depmap = get_dependency_map(depman, mods)

  building_depmap = {}
  for p in building_packages:
    building_depmap[p] = depmap[p]

  dep_building_map = {}
  nonexistent = defaultdict(list)
  for name, ds in building_depmap.items():
    for d in ds:
      if not d.resolve():
        if not d.managed():
          logger.warn('%s depends on %s, but it\'s not managed.',
                      name, d)
          nonexistent[name].append(d)
          continue
        # we need build this too
        building_packages.add(d.pkgname)
    dep_building_map[name] = {x.pkgdir.name for x in ds}

  for name, ds in nonexistent.items():
    send_error_report(
      name, subject='软件包 %s 的 lilac.py 指定了不存在的依赖',
      msg = f'''软件包 {name} 的 lilac.py 指定了 depends，然而其中的 {ds!r} 并不在本仓库中。
''')

  packages = toposort_flatten(dep_building_map)
  # filter out already built packages
  packages = [x for x in packages if x in building_packages]

  # ensure all packages including dependents are included
  for p in packages:
    building_depmap[p] = depmap[p]

  # used to decide what to install when building
  DEPENDS = building_depmap

  try:
    logger.info('building these packages: %r', packages)
    for pkg in packages:
      if pkg in failed:
        # marked as failed, skip
        continue

      path = REPO.repodir / pkg
      with at_dir(path):
        try:
          if build_package(pkg, mods[pkg]):
            built.add(pkg)
          else:
            failed.add(pkg)

        except MissingDependencies as e:
          reason = ''

          faileddeps = e.deps & failed
          if faileddeps:
            reason += '唔，这些包没能成功打包呢：%r' % faileddeps

          send_error_report(pkg, subject='%s 出现依赖问题',
                            msg = '''\
在成功地编译打包 {built} 之后，{pkg} 依旧依赖 {deps}。

{reason}'''.format(
    built = built, deps = e.deps, pkg = pkg, reason = reason,
  ))
          failed.add(pkg)

  except KeyboardInterrupt:
    logger.info('keyboard interrupted, bye~')

def load_all_lilac_and_report(repodir):
  mods, errors = lilacpy.load_all(repodir)
  failed = set(errors)
  for name, exc_info in errors.items():
    tb = traceback.format_exception(*exc_info)
    tb = ''.join(tb)
    logger.error('error while loading lilac.py for %s', name, exc_info=exc_info)
    send_error_report(name, exc=(exc_info[1], tb),
                      subject='为软件包 %s 载入 lilac.py 时失败')
    build_logger.error('%s failed', name)

  return mods, failed

def main_may_raise(D):
  failed_info = D.get('failed', {})

  git_reset_hard()
  git_pull()
  mods, failed = load_all_lilac_and_report(REPO.repodir)

  U = set(mods)
  last_commit = D.get('last_commit', EMPTY_COMMIT)
  revisions = last_commit + '..HEAD'
  changed = get_changed_packages(revisions) & U
  _nvdata, unknown = packages_need_update(REPO, U)
  nvdata.update(_nvdata)
  updated = {x for x, y in nvdata.items()
              if y.oldver != y.newver}

  failed_prev = set(failed_info.keys())
  failed_updated = {k for k, v in failed_info.items()
                    if k in nvdata and nvdata[k][1] != v}
  # build updated; if last build failed but it gets updated once more,
  # build it again
  need_update = updated | failed_updated
  # no update from upstream, but build instructions have changed; rebuild
  # failed ones
  need_rebuild_failed = failed_prev & changed
  # if pkgrel is updated, build a new release
  need_rebuild_pkgrel = {x for x in changed
                        if pkgrel_changed(revisions, x)} - unknown
  all_building = need_update | need_rebuild_failed | need_rebuild_pkgrel

  logger.info('these updated (pkgrel) packages should be rebuilt: %r',
              need_rebuild_pkgrel or None)
  logger.info('these previously-failed packages should be rebuilt: %r',
              need_rebuild_failed or None)
  logger.info('these packages are updated as detected by nvchecker: %r',
              need_update or None)

  building_packages.update(all_building)
  update_succeeded = set()

  try:
    start_build(mods, failed, update_succeeded)
    D['last_commit'] = git_last_commit()
  finally:
    # handle what has been processed even on exception
    failed_info.update({k: nvdata[k][1] for k in failed if k in nvdata})

    for x in update_succeeded:
      if x in failed_info:
        del failed_info[x]
    D['failed'] = failed_info

    if config.getboolean('lilac', 'rebuild_failed_pkgs'):
      if update_succeeded:
        nvtake(list(update_succeeded))
    else:
      if need_update:
        nvtake(list(need_update))

    git_reset_hard()
    if config.getboolean('lilac', 'git_push'):
      git_push()

def main():
  store = os.path.join(mydir, 'store')
  with PickledData(store, default={}) as D:
    try:
      main_may_raise(D)
    except Exception:
      tb = traceback.format_exc()
      logger.exception('unexpected error')
      subject = '运行时错误'
      msg = '调用栈如下：\n\n' + tb
      REPO.report_error(subject, msg)

def setup():
  if config.getboolean('lilac', 'log_to_file'):
    os.makedirs(os.path.join(mydir, 'log'), exist_ok=True)
    logfile = os.path.join(mydir, 'log', time.strftime('%Y-%m-%dT%H:%M:%S'))
    fd = os.open(logfile, os.O_WRONLY | os.O_CREAT, 0o644)
    os.dup2(fd, 1)
    os.dup2(fd, 2)
    os.close(fd)

  enable_pretty_logging('DEBUG')
  if 'MAKEFLAGS' not in os.environ:
    cores = os.cpu_count()
    if cores is not None:
      os.environ['MAKEFLAGS'] = '-j{0} -l{0}'.format(cores)

  lock_file(os.path.join(mydir, '.lock'))

  aur_repo_dir = os.path.join(mydir, 'aur')
  os.makedirs(aur_repo_dir, exist_ok=True)
  lilaclib.AUR_REPO_DIR = aur_repo_dir

  setup_build_logger()
  os.chdir(REPO.repodir)
  lilaclib.send_error_report = send_error_report

if __name__ == '__main__':
  try:
    setup()

    if len(sys.argv) == 1:
      main()
    else:
      sys.exit('no argument should be given')
  except Exception:
    logger.exception('unexpected error')
