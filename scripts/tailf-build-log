#!/usr/bin/python3

import sys
import select
import os
import datetime

import psycopg2
import psycopg2.extras

from lilac2.vendor.myutils import humantime, filesize

def c(n):
  return f'\x1b[38;5;{n}m'

FMT = {
  'successful': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} as {c(15)}%(pkg_version)s{c(7)} in {c(6)}%(elapsed)s',
  'staged': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} as {c(15)}%(pkg_version)s{c(7)} in {c(6)}%(elapsed)s',
  'failed': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} to build as {c(15)}%(pkg_version)s{c(7)} in {c(6)}%(elapsed)s',
  'skipped': f'[{c(12)}%(ts)s{c(7)}] {c(15)}%(pkgbase)s{c(7)} %(nv_version)s %(action)s{c(7)} because {c(15)}%(msg)s',
  '_rusage': f'{c(7)}; CPU time: {c(6)}%(cputime)s{c(7)} (%(cpupercent)s%%{c(7)}), Memory: {c(5)}%(memory)s\n',
  '_batch': f'[{c(12)}%(ts)s{c(7)}] {c(14)}build %(event)s\n',
}

ACTION = {
  'successful': f'{c(10)}built',
  'staged': f'{c(12)}staged',
  'failed': f'{c(9)}failed',
  'skipped': f'{c(3)}skipped',
}

N_CORES = os.cpu_count()

def color_gradient(v):
  r = 255 - v * 255
  g = v * 510
  b = v * 255
  if g > 255:
    g = 510 - g
  r = round(r)
  g = round(g)
  b = round(b)
  return f"\x1b[38;2;{r};{g};{b}m"

def parse_hex_color(c):
  return tuple(int(x, 16) for x in (c[1:3], c[3:5], c[5:7]))

def pretty_print(log):
  if 'event' in log:
    fmt = FMT['_batch']
    args = {
      'ts': log['ts'].strftime('%Y-%m-%d %H:%M:%S'),
      'event': log['event'],
    }
    out = c(7) + fmt % args
    sys.stdout.write(out)
    return

  result = log['result']
  cputime = log['cputime']
  memory = log['memory']
  if cputime is None:
    cputime = 0
    memory = 0

  if log['elapsed']:
    cpupercent = round(100 * cputime / log['elapsed'])
  else:
    cpupercent = 0
  cpupercent = color_gradient(1 - cpupercent / 100 / N_CORES) + str(cpupercent)

  args = {
    'ts': log['ts'].strftime('%Y-%m-%d %H:%M:%S'),
    'pkgbase': log['pkgbase'],
    'nv_version': log['nv_version'],
    'action': ACTION.get(result),
    'pkg_version': log['pkg_version'],
    'elapsed': humantime(log['elapsed']),
    'msg': log['msg'],
    'cputime': humantime(cputime),
    'cpupercent': cpupercent,
    'memory': filesize(memory),
  }

  fmt = FMT[result]
  out = c(7) + fmt % args + FMT['_rusage'] % args
  if result == 'failed':
    out += f'{c(8)}{log["msg"][:1000]}\n'
  sys.stdout.write(out)

def iter_pkglog():
  conn = psycopg2.connect('')
  with conn:
    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute('select * from lilac.pkglog order by ts desc limit 40')
    logs = list(cursor)

    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute('select * from lilac.batch where ts > %s', (logs[-1]['ts'],))
    logs.extend(cursor)
    logs.sort(key=lambda x: x['ts'])

    cursor = conn.cursor()
    cursor.execute('listen build_updated')

  for log in logs:
    log['ts'] = log['ts'].astimezone()
  yield from logs

  last_ts = datetime.datetime.now().astimezone()
  poll = select.poll()
  poll.register(conn, select.POLLIN)

  while True:
    poll.poll()
    conn.poll()

    with conn:
      cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
      cursor.execute('select * from lilac.pkglog where ts > %s', (last_ts,))
      logs = list(cursor)

      cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
      cursor.execute('select * from lilac.batch where ts > %s', (last_ts,))
      logs.extend(cursor)

      logs.sort(key=lambda x: x['ts'])
      last_ts = datetime.datetime.now().astimezone()

      for log in logs:
        log['ts'] = log['ts'].astimezone()
      yield from logs

def main():
  for log in iter_pkglog():
    try:
      pretty_print(log)
    except Exception:
      print(log)
      raise

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    sys.exit(130)
